virtualenv_create("r-reticulate",
python = "C:/Users/ahnd6/AppData/Local/Programs/Python/Python39/python.exe")
}
# 2. Tell reticulate to use it:
use_virtualenv("r-reticulate", required = TRUE)
py_config()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 프로젝트 폴더의 가상환경을 그대로 가리킵니다.
use_virtualenv(".venv", required = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 프로젝트 폴더의 가상환경을 그대로 가리킵니다.
use_virtualenv(".venv", required = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python(file.path(getwd(), ".venv", ifelse(.Platform$OS.type=="windows","Scripts/python.exe","bin/python")), required=TRUE)
# 프로젝트 폴더의 가상환경을 그대로 가리킵니다.
use_virtualenv(".venv", required = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python(file.path(getwd(), ".venv", ifelse(.Platform$OS.type=="windows","Scripts/python.exe","bin/python")), required=TRUE)
py_config()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python(file.path(getwd(), ".venv", ifelse(.Platform$OS.type=="windows","Scripts/python.exe","bin/python")), required=TRUE)
py_config()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python(file.path(getwd(), ".venv", ifelse(.Platform$OS.type=="windows","Scripts/python.exe")), required=TRUE)
py_config()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("C:\Users\ahnd6\AppData\Local\Programs\Python\Python39\python.exe",
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("C:/Users/ahnd6/AppData/Local/Programs/Python/Python39/python.exe",
required = TRUE)
use_python(file.path(getwd(), ".venv", ifelse(.Platform$OS.type=="windows","Scripts/python.exe")), required=TRUE)
py_config()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# Point directly at your .venv python; do NOT also call use_python() again.
venv_python <- file.path(
getwd(),
".venv",
ifelse(.Platform$OS.type=="windows", "Scripts/python.exe", "bin/python")
)
use_python(venv_python, required = TRUE)
# Now py_config() will show your virtualenv interpreter
py_config()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python(
"C:/Users/ahnd6/AppData/Local/Programs/Python/Python39/python.exe",
required = TRUE
)
py_config()
reticulate::repl_python()
pkgs <- c('transformers', 'datasets', 'torch', 'scikit-learn', 'evaluate', 'pandas', 'scikit-learn', 'tqdm' )
to_install <- pkgs[!sapply(pkgs, py_module_available)]
if (length(to_install)) {
reticulate::pip_install(to_install)
pkgs <- c('transformers', 'datasets', 'torch', 'scikit-learn', 'evaluate', 'pandas', 'scikit-learn', 'tqdm' )
to_install <- pkgs[!sapply(pkgs, py_module_available)]
if (length(to_install)) {
reticulate::pip_install(to_install)
}
pkgs <- c('transformers', 'datasets', 'torch', 'scikit-learn',
'evaluate', 'pandas', 'tqdm')  # 중복 제거
to_install <- pkgs[!sapply(pkgs, py_module_available)]
if (length(to_install)) {
reticulate::pip_install(to_install)
}
library(reticulate)
pkgs <- c('transformers', 'datasets', 'torch', 'scikit-learn',
'evaluate', 'pandas', 'tqdm')  # 중복 제거
to_install <- pkgs[!sapply(pkgs, py_module_available)]
if (length(to_install)) {
reticulate::pip_install(to_install)
}
library(reticulate)
# 설치할 패키지 리스트
pkgs <- c('transformers', 'datasets', 'torch',
'scikit-learn', 'evaluate', 'pandas', 'tqdm')
# 아직 설치되지 않은 패키지 검출
to_install <- pkgs[!sapply(pkgs, py_module_available)]
if (length(to_install)) {
# pip 옵션으로 설치
py_install(packages = to_install, pip = TRUE)
}
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python(
"C:/Users/ahnd6/AppData/Local/Programs/Python/Python39/python.exe", #use your own path to python
required = TRUE
)
py_config()
library(reticulate)
# 설치할 패키지 리스트
pkgs <- c('transformers', 'datasets', 'torch',
'scikit-learn', 'evaluate', 'pandas', 'tqdm')
# 아직 설치되지 않은 패키지 검출
to_install <- pkgs[!sapply(pkgs, py_module_available)]
if (length(to_install)) {
# pip 옵션으로 설치
py_install(packages = to_install, pip = TRUE)
}
knit_with_parameters("~/GitHub/GSLP-ML-Group1/Final project.Rmd")
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
knitr::include_graphics("images/svm.9.2.png")
knitr::include_graphics("images/svm.9.3.png")
knitr::include_graphics("images/svm.9.4.png")
knitr::include_graphics("images/svm.9.5.png")
knitr::include_graphics("images/svm.9.6.png")
knitr::include_graphics("images/svm.9.7.png")
knitr::include_graphics("images/svm.9.8.png")
knitr::include_graphics("images/svm_kernel_machine.png")
knitr::include_graphics("images/svm.9.9.png")
library(caret)
library(RColorBrewer)
library(ggplot2)
library(pROC)
library(e1071)
moons <- read.csv("data/sim_data_svm/moons.csv", header=F)
moons$V3=as.factor(moons$V3)
str(moons)
set.seed(42)
trainIndex <- createDataPartition(y=moons$V3, times=1, p=0.7, list=F)
moonsTrain <- moons[trainIndex,]
moonsTest <- moons[-trainIndex,]
summary(moonsTrain$V3)
summary(moonsTest$V3)
point_shapes <- c(15,17)
bp <- brewer.pal(3,"Dark2")
point_colours <- ifelse(moonsTrain$V3=="A", bp[1], bp[2])
point_shapes <- ifelse(moonsTrain$V3=="A", 15, 17)
point_size = 2
ggplot(moonsTrain, aes(V1,V2)) +
geom_point(col=point_colours, shape=point_shapes,
size=point_size) +
theme_bw() +
theme(plot.title = element_text(size=25, face="bold"), axis.text=element_text(size=15),
axis.title=element_text(size=20,face="bold"))
set.seed(42)
seeds = vector(mode='list',length=101) #this is #folds+1 so 10+1
for (i in 1:100) seeds[[i]] = sample.int(1000,100)
seeds[[101]] = sample.int(1000,1)
trctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
seeds = seeds,
classProbs=TRUE)
library(e1071)
svmTune <- train(x = moonsTrain[,c(1:2)],
y = moonsTrain[,3],
method = "svmRadial",
tuneLength = 9,
preProc = c("center", "scale"),
trControl = trctrl)
svmTune
svmPred <- predict(svmTune, moonsTest[,c(1:2)])
confusionMatrix(svmPred, as.factor(moonsTest[,3]))
svmProbs <- predict(svmTune, moonsTest[,c(1:2)], type="prob")
head(svmProbs)
svmROC <- roc(moonsTest[,3], svmProbs[,"A"])
plot(svmROC, type = "S")
auc(svmROC)
gridSize <- 150
v1limits <- c(min(moons$V1),max(moons$V1))
tmpV1 <- seq(v1limits[1],v1limits[2],len=gridSize)
v2limits <- c(min(moons$V2), max(moons$V2))
tmpV2 <- seq(v2limits[1],v2limits[2],len=gridSize)
xgrid <- expand.grid(tmpV1,tmpV2)
names(xgrid) <- names(moons)[1:2]
V3 <- as.numeric(predict(svmTune, xgrid))
xgrid <- cbind(xgrid, V3)
point_shapes <- c(15,17)
point_colours <- brewer.pal(3,"Dark2")
point_size = 2
trainClassNumeric <- ifelse(moonsTrain$V3=="A", 1, 2)
testClassNumeric <- ifelse(moonsTest$V3=="A", 1, 2)
ggplot(xgrid, aes(V1,V2)) +
geom_point(col=point_colours[V3], shape=16, size=0.3) +
geom_point(data=moonsTrain, aes(V1,V2), col=point_colours[trainClassNumeric],
shape=point_shapes[trainClassNumeric], size=point_size) +
geom_contour(data=xgrid, aes(x=V1, y=V2, z=V3), breaks=1.5, col="grey30") +
ggtitle("train") +
theme_bw() +
theme(plot.title = element_text(size=25, face="bold"), axis.text=element_text(size=15),
axis.title=element_text(size=20,face="bold"))
ggplot(xgrid, aes(V1,V2)) +
geom_point(col=point_colours[V3], shape=16, size=0.3) +
geom_point(data=moonsTest, aes(V1,V2), col=point_colours[testClassNumeric],
shape=point_shapes[testClassNumeric], size=point_size) +
geom_contour(data=xgrid, aes(x=V1, y=V2, z=V3), breaks=1.5, col="grey30") +
ggtitle("test") +
theme_bw() +
theme(plot.title = element_text(size=25, face="bold"), axis.text=element_text(size=15),
axis.title=element_text(size=20,face="bold"))
library(datasets)
data(iris) ##loads the dataset, which can be accessed under the variable name iris
?iris ##opens the documentation for the dataset
summary(iris) ##presents the 5 figure summary of the dataset
str(iris) ##presents the structure of the iris dataframe
set.seed(42)
trainTestPartition<-createDataPartition(y=iris$Species, #the class label, caret ensures an even split of classes
p=0.7, #proportion of samples assigned to train
list=FALSE)
str(trainTestPartition)
iris.training <- iris[ trainTestPartition,] #take the corresponding rows for training
iris.testing  <- iris[-trainTestPartition,] #take the corresponding rows for testing by removing training rows
set.seed(42)
seeds = vector(mode='list',length=101) #you need length #folds*#repeats + 1 so 10*10 + 1 here
for (i in 1:100) seeds[[i]] = sample.int(1000,10)
seeds[[101]] = sample.int(1000,1)
train_ctrl_seed_repeated = trainControl(method='repeatedcv',
number=10, #number of folds
repeats=10, #number of times to repeat cross-validation
seeds=seeds)
iris_svm <- train(
Species ~ .,
data = iris.training,
method = "svmLinear",
preProc = c("corr","nzv","center", "scale","BoxCox"),
tuneLength=10,
trControl = train_ctrl_seed_repeated
)
iris_svm
iris_information_predict_train=predict(iris_svm,iris.training,type='raw')
confusionMatrix(iris_information_predict_train,iris.training$Species)
iris_gini_predict=predict(iris_svm,iris.testing,type='raw')
confusionMatrix(iris_gini_predict,iris.testing$Species)
library(caret)
library(pROC)
library(e1071)
data(segmentationData)
segClass <- segmentationData$Class
segData <- segmentationData[,4:59]
set.seed(42)
trainIndex <- createDataPartition(y=segClass, times=1, p=0.5, list=F)
segDataTrain <- segData[trainIndex,]
segDataTest <- segData[-trainIndex,]
segClassTrain <- segClass[trainIndex]
segClassTest <- segClass[-trainIndex]
set.seed(42)
seeds <- vector(mode = "list", length = 51)
for(i in 1:50) seeds[[i]] <- sample.int(1000, 9)
seeds[[51]] <- sample.int(1000,1)
cvCtrl <- trainControl(method = "repeatedcv",
repeats = 5,
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE,
seeds=seeds)
cvCtrl <- trainControl(method = "repeatedcv",
repeats = 5,
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE,
seeds=seeds)
cvCtrl <- trainControl(method = "repeatedcv",
repeats = 5,
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE,
seeds=seeds)
cvCtrl <- trainControl(method = "repeatedcv",
repeats = 5,
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE,
seeds=seeds)
data(segmentationData)
segClass <- segmentationData$Class
segData <- segmentationData[,4:59]
set.seed(42)
trainIndex <- createDataPartition(y=segClass, times=1, p=0.5, list=F)
segDataTrain <- segData[trainIndex,]
segDataTest <- segData[-trainIndex,]
segClassTrain <- segClass[trainIndex]
segClassTest <- segClass[-trainIndex]
set.seed(42)
seeds <- vector(mode = "list", length = 51)
for(i in 1:50) seeds[[i]] <- sample.int(1000, 9)
seeds[[51]] <- sample.int(1000,1)
data(segmentationData)
segmentationData
cell_svm <- train(
Class ~ ,
cell_svm <- train(
Class ~ .,
data = segDataTrain,
method = "svmRadial",
preProc = c("corr","nzv","center", "scale","BoxCox"),
tuneLength=10,
trControl = train_ctrl
)
cell_svm <- train(
Class ~ .,
data =segClassTrain, segDataTrain,
method = "svmRadial",
preProc = c("corr","nzv","center", "scale","BoxCox"),
tuneLength=10,
trControl = train_ctrl
)
cell_svm <- train(
segClassTrain ~ .,
data =segDataTrain,
method = "svmRadial",
preProc = c("corr","nzv","center", "scale","BoxCox"),
tuneLength=10,
trControl = train_ctrl
)
cell_svm <- train(
segClassTrain ~ .,
data =segDataTrain,
method = "svmRadial",
preProc = c("corr","nzv","center", "scale","BoxCox"),
tuneLength=10,
trControl = cv_ctrl
)
cell_svm <- train(
segClassTrain ~ .,
data =segDataTrain,
method = "svmRadial",
preProc = c("corr","nzv","center", "scale","BoxCox"),
tuneLength=10,
trControl = cv_Ctrl
)
cell_svm <- train(
segClassTrain ~ .,
data =segDataTrain,
method = "svmRadial",
preProc = c("corr","nzv","center", "scale","BoxCox"),
tuneLength=10,
trControl = cv_Ctrl
)
cell_svm <- train(
segClassTrain ~ .,
data =segDataTrain,
method = "svmRadial",
preProc = c("corr","nzv","center", "scale","BoxCox"),
tuneLength=10,
trControl = cvCtrl
)
set.seed(42)
seeds <- vector(mode = "list", length = 51)
for(i in 1:50) seeds[[i]] <- sample.int(1000, 9)
seeds[[51]] <- sample.int(1000,1)
cvCtrl <- trainControl(method = "repeatedcv",
repeats = 5,
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE,
seeds=seeds)
cell_svm <- train(
segClassTrain ~ .,
data =segDataTrain,
method = "svmRadial",
preProc = c("corr","nzv","center", "scale","BoxCox"),
tuneLength=10,
trControl = cvCtrl
)
set.seed(42)
seeds <- vector(mode = "list", length = 51)
for(i in 1:50) {seeds[[i]] <- sample.int(1000, 9)}
seeds[[51]] <- sample.int(1000,1)
cvCtrl <- trainControl(method = "repeatedcv",
repeats = 5,
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE,
seeds=seeds)
cell_svm <- train(
segClassTrain ~ .,
data =segDataTrain,
method = "svmRadial",
preProc = c("corr","nzv","center", "scale","BoxCox"),
tuneLength=10,
trControl = cvCtrl
)
set.seed(42)
seeds <- vector(mode = "list", length = 51)
for(i in 1:50) {seeds[[i]] <- sample.int(1000,10)}
seeds[[51]] <- sample.int(1000,1)
cvCtrl <- trainControl(method = "repeatedcv",
repeats = 5,
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE,
seeds=seeds)
cell_svm <- train(
segClassTrain ~ .,
data =segDataTrain,
method = "svmRadial",
preProc = c("corr","nzv","center", "scale","BoxCox"),
tuneLength=10,
trControl = cvCtrl
)
# Terms 객체에서 기대하는 변수 이름 확인
missing_vars <- setdiff(all.vars(Terms), colnames(data))
segDataTrain$class=segClassTrain
cell_svm <- train(
class~ .,
data =segDataTrain,
method = "svmRadial",
preProc = c("corr","nzv","center", "scale","BoxCox"),
tuneLength=10,
trControl = cvCtrl
)
cell_svm
cell_predict_train=predict(iris_svm,segDataTrain,type='raw')
cell_predict_train=predict(cell_svm,segDataTrain,type='raw')
confusionMatrix(cell_predict_train,segClassTrain)
cell_predict=predict(cell_svm,segDataTest,type='raw')
confusionMatrix(cell_predict,segClassTest)
library(pROC)
# 확률 예측
probs <- predict(cell_svm, segDataTest, type = "prob")[,2]
roc_obj <- roc(segDataTest$class, probs)
library(pROC)
# 확률 예측
segDataTest$class <- factor(segDataTest$class, levels = c("PS","WS"))
library(pROC)
# 확률 예측
# PS를 negative, WS를 positive로 지정
segDataTest$class <- factor(segDataTest$class,
levels = c("PS","WS"))
library(pROC)
# 확률 예측
probs <- predict(cell_svm, segDataTest, type = "prob")[,2]
roc_obj <- roc(segClassTest, probs)
ggroc(roc_obj) +
labs(title = "ROC Curve", x = "False Positive Rate", y = "True Positive Rate") +
theme_minimal()
library(pROC)
# 확률 예측
probs <- predict(cell_svm, segDataTest, type = "prob")[,2]
roc_obj <- roc(segClassTest, probs)
ggroc(roc_obj) +
labs(title = "ROC Curve", x = "False Positive Rate", y = "True Positive Rate") +
theme_minimal()
print(auc)
knitr::include_graphics("images/svm.9.2.png")
knitr::include_graphics("images/svm.9.3.png")
knitr::include_graphics("images/svm.9.4.png")
knitr::include_graphics("images/svm.9.5.png")
knitr::include_graphics("images/svm.9.6.png")
knitr::include_graphics("images/svm.9.7.png")
knitr::include_graphics("images/svm.9.8.png")
knitr::include_graphics("images/svm_kernel_machine.png")
knitr::include_graphics("images/svm.9.9.png")
library(caret)
library(RColorBrewer)
library(ggplot2)
library(pROC)
library(e1071)
moons <- read.csv("data/sim_data_svm/moons.csv", header=F)
moons$V3=as.factor(moons$V3)
str(moons)
set.seed(42)
trainIndex <- createDataPartition(y=moons$V3, times=1, p=0.7, list=F)
moonsTrain <- moons[trainIndex,]
moonsTest <- moons[-trainIndex,]
summary(moonsTrain$V3)
summary(moonsTest$V3)
point_shapes <- c(15,17)
bp <- brewer.pal(3,"Dark2")
point_colours <- ifelse(moonsTrain$V3=="A", bp[1], bp[2])
point_shapes <- ifelse(moonsTrain$V3=="A", 15, 17)
point_size = 2
ggplot(moonsTrain, aes(V1,V2)) +
geom_point(col=point_colours, shape=point_shapes,
size=point_size) +
theme_bw() +
theme(plot.title = element_text(size=25, face="bold"), axis.text=element_text(size=15),
axis.title=element_text(size=20,face="bold"))
set.seed(42)
seeds = vector(mode='list',length=101) #this is #folds+1 so 10+1
for (i in 1:100) seeds[[i]] = sample.int(1000,100)
seeds[[101]] = sample.int(1000,1)
trctrl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
seeds = seeds,
classProbs=TRUE)
library(e1071)
svmTune <- train(x = moonsTrain[,c(1:2)],
y = moonsTrain[,3],
method = "svmRadial",
tuneLength = 9,
preProc = c("center", "scale"),
trControl = trctrl)
library(pROC)
# 확률 예측
probs <- predict(cell_svm, segDataTest, type = "prob")[,2]
roc_obj <- roc(segClassTest, probs)
ggroc(roc_obj) +
labs(title = "ROC Curve", x = "False Positive Rate", y = "True Positive Rate") +
theme_minimal()
print(auc)
library(pROC)
# 확률 예측
probs <- predict(cell_svm, segDataTest, type = "prob")[,2]
roc_obj <- roc(segClassTest, probs)
ggroc(roc_obj) +
labs(title = "ROC Curve", x = "False Positive Rate", y = "True Positive Rate") +
theme_minimal()
auc_value <- auc(roc_obj)
print(auc_value)
