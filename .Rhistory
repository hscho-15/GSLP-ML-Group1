knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
install.packages('reticulate')
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 1. Create the venv only once:
if (!virtualenv_exists("r-reticulate")) {
virtualenv_create("r-reticulate")
}
# 2. Tell reticulate to use it:
use_virtualenv("r-reticulate", required = TRUE)
reticulate::repl_python()
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 1. Create the venv only once:
if (!virtualenv_exists("r-reticulate")) {
virtualenv_create("r-reticulate")
}
# 2. Tell reticulate to use it:
use_virtualenv("r-reticulate", required = TRUE)
py_config()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 1. Create the venv only once:
if (!virtualenv_exists("r-reticulate")) {
virtualenv_create("r-reticulate")
}
if (!virtualenv_exists("r-reticulate")) {
virtualenv_create("r-reticulate",
python = "C:/Users/ahnd6/AppData/Local/Programs/Python/Python39/python.exe")
}
library(reticulate)
# 프로젝트 루트에 Pipfile 있으면 pipenv 환경을 자동으로 활성화
use_pipenv(required = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 1. Create the venv only once:
if (!virtualenv_exists("r-reticulate")) {
virtualenv_create("r-reticulate")
}
if (!virtualenv_exists("r-reticulate")) {
virtualenv_create("r-reticulate",
python = "C:/Users/ahnd6/AppData/Local/Programs/Python/Python39/python.exe")
}
# 2. Tell reticulate to use it:
use_virtualenv("r-reticulate", required = TRUE)
py_config()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 프로젝트 폴더의 가상환경을 그대로 가리킵니다.
use_virtualenv(".venv", required = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# 프로젝트 폴더의 가상환경을 그대로 가리킵니다.
use_virtualenv(".venv", required = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python(file.path(getwd(), ".venv", ifelse(.Platform$OS.type=="windows","Scripts/python.exe","bin/python")), required=TRUE)
# 프로젝트 폴더의 가상환경을 그대로 가리킵니다.
use_virtualenv(".venv", required = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python(file.path(getwd(), ".venv", ifelse(.Platform$OS.type=="windows","Scripts/python.exe","bin/python")), required=TRUE)
py_config()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python(file.path(getwd(), ".venv", ifelse(.Platform$OS.type=="windows","Scripts/python.exe","bin/python")), required=TRUE)
py_config()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python(file.path(getwd(), ".venv", ifelse(.Platform$OS.type=="windows","Scripts/python.exe")), required=TRUE)
py_config()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("C:\Users\ahnd6\AppData\Local\Programs\Python\Python39\python.exe",
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("C:/Users/ahnd6/AppData/Local/Programs/Python/Python39/python.exe",
required = TRUE)
use_python(file.path(getwd(), ".venv", ifelse(.Platform$OS.type=="windows","Scripts/python.exe")), required=TRUE)
py_config()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# Point directly at your .venv python; do NOT also call use_python() again.
venv_python <- file.path(
getwd(),
".venv",
ifelse(.Platform$OS.type=="windows", "Scripts/python.exe", "bin/python")
)
use_python(venv_python, required = TRUE)
# Now py_config() will show your virtualenv interpreter
py_config()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python(
"C:/Users/ahnd6/AppData/Local/Programs/Python/Python39/python.exe",
required = TRUE
)
py_config()
reticulate::repl_python()
pkgs <- c('transformers', 'datasets', 'torch', 'scikit-learn', 'evaluate', 'pandas', 'scikit-learn', 'tqdm' )
to_install <- pkgs[!sapply(pkgs, py_module_available)]
if (length(to_install)) {
reticulate::pip_install(to_install)
pkgs <- c('transformers', 'datasets', 'torch', 'scikit-learn', 'evaluate', 'pandas', 'scikit-learn', 'tqdm' )
to_install <- pkgs[!sapply(pkgs, py_module_available)]
if (length(to_install)) {
reticulate::pip_install(to_install)
}
pkgs <- c('transformers', 'datasets', 'torch', 'scikit-learn',
'evaluate', 'pandas', 'tqdm')  # 중복 제거
to_install <- pkgs[!sapply(pkgs, py_module_available)]
if (length(to_install)) {
reticulate::pip_install(to_install)
}
library(reticulate)
pkgs <- c('transformers', 'datasets', 'torch', 'scikit-learn',
'evaluate', 'pandas', 'tqdm')  # 중복 제거
to_install <- pkgs[!sapply(pkgs, py_module_available)]
if (length(to_install)) {
reticulate::pip_install(to_install)
}
library(reticulate)
# 설치할 패키지 리스트
pkgs <- c('transformers', 'datasets', 'torch',
'scikit-learn', 'evaluate', 'pandas', 'tqdm')
# 아직 설치되지 않은 패키지 검출
to_install <- pkgs[!sapply(pkgs, py_module_available)]
if (length(to_install)) {
# pip 옵션으로 설치
py_install(packages = to_install, pip = TRUE)
}
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python(
"C:/Users/ahnd6/AppData/Local/Programs/Python/Python39/python.exe", #use your own path to python
required = TRUE
)
py_config()
library(reticulate)
# 설치할 패키지 리스트
pkgs <- c('transformers', 'datasets', 'torch',
'scikit-learn', 'evaluate', 'pandas', 'tqdm')
# 아직 설치되지 않은 패키지 검출
to_install <- pkgs[!sapply(pkgs, py_module_available)]
if (length(to_install)) {
# pip 옵션으로 설치
py_install(packages = to_install, pip = TRUE)
}
knit_with_parameters("~/GitHub/GSLP-ML-Group1/Final project.Rmd")
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
